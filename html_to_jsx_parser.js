// Generated by CoffeeScript 1.6.3
(function() {
  var HtmlToJsxParser;

  HtmlToJsxParser = (function() {
    var validReactProperties;

    function HtmlToJsxParser() {}

    HtmlToJsxParser.prototype.htmlToJsxString = function(html) {
      var handler;
      handler = new Tautologistics.NodeHtmlParser.HtmlBuilder(function(error, dom) {
        if (error) {
          return console.log("error");
        }
      });
      new Tautologistics.NodeHtmlParser.Parser(handler).parseComplete(html);
      return this.domToJsxString(handler.dom);
    };

    HtmlToJsxParser.prototype.domToJsxString = function(dom) {
      var className, cleanAttribute, css, css_parser, jsx, line_num, node, styleScript, styles, walk, _i, _len;
      jsx = "";
      styles = {};
      css_parser = new less.Parser();
      cleanAttribute = function(value) {
        return value.replace(/\"/g, "&quot;");
      };
      walk = function(node) {
        var child, name, reactName, text, value, _i, _len, _ref, _ref1;
        if (node.type === "tag") {
          if (React.DOM[node.name] && node.name.toLowerCase() !== "script") {
            jsx += "<" + node.name + " ";
            if (node.attributes) {
              _ref = node.attributes;
              for (name in _ref) {
                value = _ref[name];
                name = name.toLowerCase();
                if (name === "class") {
                  name = "classname";
                }
                reactName = validReactProperties[name];
                if (reactName) {
                  name = reactName;
                }
                if (reactName || name.indexOf("data-") === 0 || name.indexOf("aria-") === 0) {
                  if (name === "style") {
                    css_parser.parse(".class { " + value + " }", function(err, tree) {
                      var css, generatedClass, rule, _i, _len, _ref1;
                      if (err) {

                      } else {
                        generatedClass = "jsxGen" + (Math.floor(Math.random() * 10000000));
                        css = {};
                        _ref1 = tree.rules[0].rules;
                        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                          rule = _ref1[_i];
                          css[rule.name] = rule.value.toCSS();
                        }
                        styles[generatedClass] = css;
                        return jsx += "style={" + generatedClass + "}";
                      }
                    });
                  } else {
                    if (value) {
                      jsx += " " + name + "=\"" + (cleanAttribute(value)) + "\" ";
                    } else {
                      jsx += " " + name + " ";
                    }
                  }
                } else {

                }
              }
            }
            jsx += ">\n";
            if (node.children != null) {
              _ref1 = node.children;
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                child = _ref1[_i];
                walk(child);
              }
            }
            return jsx += "</" + node.name + ">\n";
          } else {

          }
        } else if (node.type === "text") {
          text = node.data.trim();
          text = text.replace(/&nbsp;/, " ");
          text = text.replace(/&#160;/, " ");
          return jsx += text;
        } else {
          if (node.type !== "comment") {
            return console.log("invalid type " + node.type);
          }
        }
      };
      for (_i = 0, _len = dom.length; _i < _len; _i++) {
        node = dom[_i];
        walk(node);
      }
      styleScript = "";
      for (className in styles) {
        css = styles[className];
        styleScript += "var " + className + " = " + (JSON.stringify(css)) + ";\n";
      }
      line_num = 1;
      jsx = "<div>" + jsx + "</div>";
      return {
        jsx: jsx,
        styleScript: styleScript
      };
    };

    validReactProperties = {
      accept: "accept",
      accesskey: "accessKey",
      action: "action",
      allowfullscreen: "allowFullScreen",
      allowtransparency: "allowTransparency",
      alt: "alt",
      async: "async",
      autocomplete: "autoComplete",
      autofocus: "autoFocus",
      autoplay: "autoPlay",
      cellpadding: "cellPadding",
      cellspacing: "cellSpacing",
      charset: "charSet",
      checked: "checked",
      classname: "className",
      cols: "cols",
      colspan: "colSpan",
      content: "content",
      contenteditable: "contentEditable",
      contextmenu: "contextMenu",
      controls: "controls",
      data: "data",
      datetime: "dateTime",
      defer: "defer",
      dir: "dir",
      disabled: "disabled",
      draggable: "draggable",
      enctype: "encType",
      form: "form",
      frameborder: "frameBorder",
      height: "height",
      hidden: "hidden",
      href: "href",
      htmlfor: "htmlFor",
      httpequiv: "httpEquiv",
      icon: "icon",
      id: "id",
      label: "label",
      lang: "lang",
      list: "list",
      loop: "loop",
      max: "max",
      maxlength: "maxLength",
      method: "method",
      min: "min",
      multiple: "multiple",
      name: "name",
      pattern: "pattern",
      placeholder: "placeholder",
      poster: "poster",
      preload: "preload",
      radiogroup: "radioGroup",
      readonly: "readOnly",
      rel: "rel",
      required: "required",
      role: "role",
      rows: "rows",
      rowspan: "rowSpan",
      scrollleft: "scrollLeft",
      scrolltop: "scrollTop",
      selected: "selected",
      size: "size",
      spellcheck: "spellCheck",
      src: "src",
      step: "step",
      style: "style",
      tabindex: "tabIndex",
      target: "target",
      title: "title",
      type: "type",
      value: "value",
      width: "width",
      wmode: "wmode"
    };

    return HtmlToJsxParser;

  })();

  window.HtmlToJsxParser = HtmlToJsxParser;

}).call(this);
