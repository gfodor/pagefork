// Generated by CoffeeScript 1.5.0
(function() {

  $(function() {
    var docIds, initDoc, phorkId;
    docIds = [];
    phorkId = $('body').data('phorkId');
    initDoc = function(docInfo, sjs) {
      var doc;
      doc = sjs.get('docs', docInfo.doc_id);
      doc.subscribe();
      return doc.whenReady(function() {
        var aceEditor, codeDiv, component, editor, target;
        codeDiv = $("<div>").prop("id", "code-" + docInfo.doc_id);
        editor = $("<div>");
        codeDiv.append(editor);
        $("#phork-ui .tabs").append(codeDiv);
        aceEditor = ace.edit("code-" + docInfo.doc_id);
        $("#code-" + docInfo.doc_id).addClass("code-editor");
        aceEditor.getSession().setMode("ace/mode/" + docInfo.type);
        aceEditor.setTheme("ace/theme/monokai");
        doc.attach_ace(aceEditor);
        if (docInfo.primary) {
          component = new HtmlRenderer({
            content: doc.snapshot
          });
          target = $("#doc-container .phork-html")[0];
          aceEditor.getSession().on("change", function(e) {
            setTimeout((function() {
              return component.setProps({
                content: aceEditor.getValue()
              });
            }), 0);
            return true;
          });
          return setTimeout((function() {
            return React.renderComponent(component, target);
          }), 0);
        } else if (docInfo.type === "css") {
          component = new CssRenderer();
          setTimeout((function() {
            return component.update(docInfo.doc_id, doc.snapshot);
          }), 0);
          return aceEditor.getSession().on("change", function(e) {
            setTimeout((function() {
              return component.update(docInfo.doc_id, doc.snapshot);
            }), 0);
            return true;
          });
        }
      });
    };
    return $.get("/phorks/" + phorkId + ".json", {
      dataType: "json"
    }, function(res) {
      var docInfo, sjs, socket, _i, _len, _ref, _results;
      socket = new BCSocket(null, {
        reconnect: true
      });
      sjs = new window.sharejs.Connection(socket);
      _ref = res.docs;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        docInfo = _ref[_i];
        _results.push(initDoc(docInfo, sjs));
      }
      return _results;
    });
  });

}).call(this);
