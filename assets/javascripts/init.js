// Generated by CoffeeScript 1.5.0
(function() {

  $(function() {
    var docUpdateTimeouts, guardCount, guardFrame, htmlVersion, initDoc, phorkId, primaryAceEditor, primaryComponent, readyDocs, resetGuard, totalDocs, updateDOMAfterGuard;
    phorkId = $('body').data('phorkId');
    readyDocs = 0;
    totalDocs = 0;
    htmlVersion = 0;
    guardCount = 0;
    guardFrame = null;
    primaryComponent = null;
    primaryAceEditor = null;
    docUpdateTimeouts = {};
    resetGuard = function() {
      var $guardFrame;
      if (guardFrame && (guardFrame.isReady == null)) {
        return;
      }
      $(".phork-guard").unbind("ready").remove();
      $guardFrame = $("<iframe>");
      $guardFrame.attr({
        src: "/guard",
        "class": "phork-guard",
        id: "phork-guard-" + (guardCount++)
      });
      guardFrame = $guardFrame[0];
      return $("body").append($guardFrame);
    };
    resetGuard();
    updateDOMAfterGuard = function() {
      var msg;
      if (guardFrame && (guardFrame.isReady != null)) {
        msg = {
          beforeHtml: primaryComponent.props.content,
          afterHtml: primaryAceEditor.getValue(),
          version: ++htmlVersion
        };
        return guardFrame.contentWindow.postMessage(JSON.stringify(msg), "*");
      }
    };
    window.addEventListener("message", function(e) {
      var data;
      data = JSON.parse(e.data);
      if (data.type === "guard") {
        if (data.result) {
          if (data.version === htmlVersion) {
            return primaryComponent.setProps({
              content: data.afterHtml
            });
          }
        } else {
          return resetGuard();
        }
      } else if (data.type === "guardReady") {
        if (guardFrame && e.source === guardFrame.contentWindow) {
          return guardFrame.isReady = true;
        }
      }
    });
    initDoc = function(docInfo, sjs) {
      var doc;
      totalDocs += 1;
      doc = sjs.get('docs', docInfo.doc_id);
      doc.subscribe();
      return doc.whenReady(function() {
        var aceEditor, codeDiv, component, editor, showWhenReady;
        codeDiv = $("<div>").prop("id", "code-" + docInfo.doc_id);
        editor = $("<div>");
        codeDiv.append(editor);
        $("#phork-ui .tabs").append(codeDiv);
        aceEditor = ace.edit("code-" + docInfo.doc_id);
        $("#code-" + docInfo.doc_id).addClass("code-editor");
        aceEditor.getSession().setMode("ace/mode/" + docInfo.type);
        aceEditor.setTheme("ace/theme/monokai");
        doc.attach_ace(aceEditor);
        if (docInfo.primary) {
          primaryComponent = new HtmlRenderer({
            content: doc.snapshot
          });
          primaryAceEditor = aceEditor;
          aceEditor.getSession().on("change", function(e) {
            var updateTimeout;
            updateTimeout = docUpdateTimeouts[docInfo.doc_id];
            if (updateTimeout) {
              clearTimeout(updateTimeout);
            }
            docUpdateTimeouts[docInfo.doc_id] = setTimeout(updateDOMAfterGuard, 250);
            return true;
          });
          readyDocs += 1;
          showWhenReady = function() {
            if (readyDocs >= totalDocs) {
              return setTimeout((function() {
                return React.renderComponent(primaryComponent, $("#doc-container .phork-html")[0]);
              }), 0);
            } else {
              return setTimeout(showWhenReady, 500);
            }
          };
          return showWhenReady();
        } else if (docInfo.type === "css") {
          component = new CssRenderer();
          setTimeout((function() {
            component.update(docInfo.doc_id, doc.snapshot);
            return readyDocs += 1;
          }), 0);
          return aceEditor.getSession().on("change", function(e) {
            var updateTimeout;
            updateTimeout = docUpdateTimeouts[docInfo.doc_id];
            if (updateTimeout) {
              clearTimeout(updateTimeout);
            }
            docUpdateTimeouts[docInfo.doc_id] = setTimeout((function() {
              return component.update(docInfo.doc_id, doc.snapshot);
            }), 250);
            return true;
          });
        }
      });
    };
    return $.get("/phorks/" + phorkId + ".json", {
      dataType: "json"
    }, function(res) {
      var docInfo, sjs, socket, _i, _len, _ref, _results;
      socket = new BCSocket(null, {
        reconnect: true
      });
      sjs = new window.sharejs.Connection(socket);
      _ref = res.docs;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        docInfo = _ref[_i];
        _results.push(initDoc(docInfo, sjs));
      }
      return _results;
    });
  });

}).call(this);
