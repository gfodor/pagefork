// Generated by CoffeeScript 1.5.0
(function() {
  var HtmlAssetExtractor;

  HtmlAssetExtractor = (function() {
    var INTERNAL_HOST, NODE_TYPE;

    function HtmlAssetExtractor() {}

    NODE_TYPE = {
      ELEMENT: 1,
      TEXT: 3,
      COMMENT: 8
    };

    INTERNAL_HOST = "http://assets.pagefork.io";

    HtmlAssetExtractor.prototype.extract = function(html, host, forkId, sourceProtocol) {
      var assetMap, container, newBody, _ref, _ref1;
      if ((_ref = this.sourceProtocol) == null) {
        this.sourceProtocol = "http";
      }
      if ((_ref1 = this.sourceHost) == null) {
        this.sourceHost = "localhost";
      }
      this.forkId = forkId;
      assetMap = {
        stylesheets: [],
        images: [],
        scripts: []
      };
      container = document.createElement('html');
      container.innerHTML = html;
      this.extractAssetsFromNode(container, assetMap, false);
      newBody = $("body", container);
      if (!(newBody.length > 0)) {
        newBody = $(container);
      }
      return {
        assets: assetMap,
        html: newBody.html()
      };
    };

    HtmlAssetExtractor.prototype.extractAssetsFromNode = function(node, assetMap, isHead) {
      var asset, attributes, childNode, collection, tag, _i, _len, _ref, _results;
      if (node.nodeType === NODE_TYPE.ELEMENT) {
        collection = null;
        tag = node.tagName.toLowerCase();
        switch (tag) {
          case "head":
            isHead = true;
            break;
          case "script":
            asset = this.assetPackageFromNode(node, "src");
            if (asset) {
              collection = assetMap.scripts;
            }
            break;
          case "link":
            attributes = this.attributeMapForNode(node);
            if (attributes.rel === "stylesheet") {
              asset = this.assetPackageFromNode(node, "href");
              if (asset) {
                collection = assetMap.stylesheets;
              }
            }
            break;
          case "img":
            asset = this.assetPackageFromNode(node, "src");
            if (asset) {
              collection = assetMap.images;
            }
        }
        if (asset && isHead) {
          asset.isHead = isHead;
        }
        if (asset && collection) {
          collection[collection.length] = asset;
        }
      }
      _ref = node.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        childNode = _ref[_i];
        _results.push(this.extractAssetsFromNode(childNode, assetMap, isHead));
      }
      return _results;
    };

    HtmlAssetExtractor.prototype.attributeMapForNode = function(node) {
      var attribute, attributeMap, _i, _len, _ref;
      attributeMap = {};
      _ref = node.attributes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attribute = _ref[_i];
        attributeMap[attribute.name.toLowerCase()] = attribute.value;
      }
      return attributeMap;
    };

    HtmlAssetExtractor.prototype.assetPackageFromNode = function(node, urlAttribute) {
      var asset, attribute, attributes, externalUrl, internalUrl, name, value, _i, _len, _ref;
      attributes = this.attributeMapForNode(node);
      if (attributes[urlAttribute] == null) {
        return null;
      }
      asset = {
        attributes: {}
      };
      for (name in attributes) {
        value = attributes[name];
        asset.attributes[name] = value;
      }
      _ref = node.attributes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attribute = _ref[_i];
        if (attribute.name.toLowerCase() === urlAttribute) {
          externalUrl = this.absolutizeUrl(attribute.value);
          internalUrl = this.externalToInternalUrl(externalUrl);
          attribute.value = internalUrl;
          asset.source = externalUrl;
          asset.attributes[name] = internalUrl;
        }
      }
      return asset;
    };

    HtmlAssetExtractor.prototype.externalToInternalUrl = function(externalUrl) {
      var a, internalUrl;
      a = document.createElement("a");
      a.href = externalUrl;
      internalUrl = "" + INTERNAL_HOST + "/" + this.forkId + "/" + a.host + a.pathname;
      if (a.search && a.search.length > 0) {
        internalUrl += "/" + (a.search.replace(/^\?/, ""));
      }
      return internalUrl;
    };

    HtmlAssetExtractor.prototype.absolutizeUrl = function(url) {
      if (url.toLowerCase().indexOf("http") === 0) {
        return url;
      } else if (url.toLowerCase().indexOf("//") === 0) {
        return "" + this.sourceProtocol + ":" + url;
      } else {
        if (url.indexOf("/") !== 0) {
          url = "/" + url;
        }
        return "" + this.sourceProtocol + "//" + this.sourceHost + url;
      }
    };

    return HtmlAssetExtractor;

  })();

  window.HtmlAssetExtractor = HtmlAssetExtractor;

}).call(this);
