// Generated by CoffeeScript 1.5.0
(function() {
  var HtmlToRNodeParser;

  HtmlToRNodeParser = (function() {
    var ATTRIBUTE_MAPPING, NODE_TYPE;

    function HtmlToRNodeParser() {}

    NODE_TYPE = {
      ELEMENT: 1,
      TEXT: 3,
      COMMENT: 8
    };

    ATTRIBUTE_MAPPING = {
      "for": "htmlFor",
      "class": "className",
      frameborder: "frameBorder",
      cellpadding: "cellPadding",
      cellspacing: "cellSpacing",
      colspan: "colSpan",
      tabindex: "tabIndex",
      autocomplete: "autoComplete",
      maxlength: "maxLength",
      autocorrect: "autoCorrect",
      autocapitalize: "autoCapitalize"
    };

    HtmlToRNodeParser.prototype.htmlToRNode = function(html) {
      var container;
      container = document.createElement('div');
      container.innerHTML = html;
      return this.rNodeFromNode(container, "rNodeRoot");
    };

    HtmlToRNodeParser.prototype.cleanHtml = function(html) {
      return html.trim().replace(/<script(.|\s)*<\/script>/gim, '').replace(/<noscript(.|\s)*<\/noscript>/gim, '');
    };

    HtmlToRNodeParser.prototype.rNodeFromNode = function(node, rNodeKey) {
      switch (node.nodeType) {
        case NODE_TYPE.ELEMENT:
          return this.elementRNodeFromNode(node, rNodeKey);
        case NODE_TYPE.TEXT:
          return node.textContent;
      }
    };

    HtmlToRNodeParser.prototype.elementRNodeFromNode = function(node, rNodeKey) {
      var attribute, attributeName, childNode, childRNode, childrenRNodes, konstructor, rNodeAttributes, selector, styles, tag, value, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      tag = node.tagName.toLowerCase();
      if (tag === "script" || tag === "noscript") {
        return null;
      }
      rNodeAttributes = {
        key: rNodeKey
      };
      konstructor = React.DOM[tag] || React.DOM.div;
      styles = {};
      _ref = node.attributes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attribute = _ref[_i];
        attributeName = ATTRIBUTE_MAPPING[attribute.name] || attribute.name;
        if (attributeName === "style") {
          _ref1 = this.parseStyles(attribute.value);
          for (selector in _ref1) {
            value = _ref1[selector];
            styles[selector] = value;
          }
        } else if (attributeName === "bgcolor") {
          styles["background-color"] = attribute.value;
        } else if (attributeName === "fgcolor") {
          styles["color"] = attribute.value;
        } else if (attributeName === "align") {
          styles["text-align"] = attribute.value;
        } else if (attributeName === "valign") {
          styles["vertical-align"] = attribute.value;
        } else {
          rNodeAttributes[attributeName] = attribute.value;
        }
      }
      if (_.keys(styles).length > 0) {
        rNodeAttributes.style = styles;
      }
      childrenRNodes = [];
      _ref2 = node.childNodes;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        childNode = _ref2[_j];
        childRNode = this.rNodeFromNode(childNode, "rNode" + childrenRNodes.length);
        if (childRNode) {
          childrenRNodes[childrenRNodes.length] = childRNode;
        }
      }
      return new konstructor(rNodeAttributes, childrenRNodes);
    };

    HtmlToRNodeParser.prototype.parseStyles = function(rawStyle) {
      var firstColon, key, style, styles, value, _i, _len, _ref;
      styles = {};
      _ref = rawStyle.split(";");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        style = _ref[_i];
        style = style.trim();
        firstColon = style.indexOf(':');
        key = style.substr(0, firstColon);
        value = style.substr(firstColon + 1).trim();
        if (key !== '') {
          styles[key] = value;
        }
      }
      return styles;
    };

    return HtmlToRNodeParser;

  })();

  window.HtmlToRNodeParser = HtmlToRNodeParser;

}).call(this);
